
name: Deploy ATVANZT website release to Acceptance environment

env:
  # Use the same ssh-agent socket value across all jobs
  # Useful when a GH action is using SSH behind-the-scenes
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock
  
# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  run-playbook:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies Including Ansible
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install community general Ansible modules
        run: ansible-galaxy collection install community.general          

    # Start ssh-agent but set it to use the same ssh_auth_sock value.
    # The agent will be running in all steps after this, so it
    # should be one of the first.
      - name: Setup SSH passphrase
        env:
          SSH_PASSPHRASE: ${{secrets.SSH_PASSPHRASE_ACC}}
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY_ACC}}
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          echo 'echo $SSH_PASSPHRASE' > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null
          
    # Debug print out the added identities. This will prove SSH_AUTH_SOCK
    # is persisted across job steps
      - name: Print ssh-add identities
        run: 
          ssh-add -l
          
    # Test ssh
      - name: Test ssh
        run:
          ssh -o StrictHostKeyChecking=no ansible@${{secrets.ACC_HOST_IP4_ADDRESS}} -p ${{secrets.SSH_PORT_ACC}}
          
    # Create the private key file
      - name: Create private key file
        env:
          SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY_ACC}}
        run: |
          cat << DELIMITER > id_rsa_ansible_acc
            $SSH_PRIVATE_KEY_ACC
          DELIMITER
          
    # Create Ansible inventory file with secrets using heredoc
      - name: Create Ansible inventory file
        env:
          ACC_HOST_IP4_ADDRESS: ${{ secrets.ACC_HOST_IP4_ADDRESS }}
          SSH_PORT_ACC: ${{ secrets.SSH_PORT_ACC }}
          SSH_ANSIBLE_USER_ACC: ${{ secrets.SSH_ANSIBLE_USER_ACC }}
        run: |
          cat << DELIMITER > inventory_acc
            $ACC_HOST_IP4_ADDRESS ansible_port=$SSH_PORT_ACC ansible_user=$SSH_ANSIBLE_USER_ACC ansible_ssh_private_key=id_rsa_ansible_acc ansible_ssh_common_args= '-o StrictHostKeyChecking=no'
          DELIMITER

      - name: run ansible command
        run: |
          ansible ${{secrets.ACC_HOST_IP4_ADDRESS}} -m ping -i inventory_acc
          
      - name: run playbook
        run: |
          ansible-playbook -i inventory_acc --extra-vars "gh_access_token=${{secrets.GITHUB_TOKEN}} gh_atvanzt_nl_access_token=${{secrets.PERSONAL_ACCESS_TOKEN_ATVGITOPS}} gh_domain_site=${{DOMAIN_ACC_ATVANZT_SITE}} gh_ip_white_list=${{ACC_IP_WHITE_LIST}} target_location=${{secrets.TARGET_LOCATION_ACC_ATVANZT_NL}}" ansible/atvanzt.nl.yml
