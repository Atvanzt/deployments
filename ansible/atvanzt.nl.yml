---
- hosts: all
  vars:
    semantic_version: ""
    release_identification: ""
    ip_white_list_filename: "/bin/ip_whitelist.json"
  become: yes
  gather_facts: yes

  pre_tasks:

  - name: Create the temporary directory
    ansible.builtin.file:
      path: "/tmp/atvanzt.nl"
      state: directory
      
  - name: Get stats of the visits log file
    ansible.builtin.stat:
      path: "{{target_location}}/atvanzt.nl/visits_atvanzt.log"
    register: stat_visits_log
    
  - name: Copy visits_atvanzt.log file when present for conservation
    ansible.builtin.copy:
      src: "{{target_location}}/atvanzt.nl/visits_atvanzt.log"
      dest: "/tmp/atvanzt.nl"
      remote_src: yes
    when: stat_visits_log.stat.exists
    
  - name: Remove any previously used web site environment
    ansible.builtin.file:
      path: "{{target_location}}/atvanzt.nl"
      state: absent

  - name: Get current list of releases to determine if there has been any version release at all
    ansible.builtin.uri:
      url: "https://api.github.com/repos/atvanzt/atvanzt.nl/releases"
      method: GET
      headers:
        Accept: "application/vnd.github+json"
        Authorization: "Bearer {{gh_atvanzt_nl_access_token}}"
        X-GitHub-Api-Version: "2022-11-28" 
      status_code: 200
    register: list_of_releases

    # Running the following test from the result of the json of all available releases
    # makes it possible to determine if there is/are zero, one or more releases
    # If there is no release at all, this step will be marked as skipped (skipped == false)
    # that is what we will use to determine if the deployment can be executed at all.
    # So after this ste use: when: not tag_name_items.skipped (if true means, there was no release found)
  - name: Found out if there is at least one release available for the atvanzt website
    debug:
      msg: "{{ item.tag_name }}"
    loop: "{{ list_of_releases.json }}"
    register: tag_name_items
    
  - name: Create the website directory
    ansible.builtin.file:
      path: "{{target_location}}/atvanzt.nl"
      state: directory
      owner: root
      group: root
      mode: u-rwx,g-rwx,o-rwx
    
  - name: Get the latest release when available 
    ansible.builtin.uri:
      url: "https://api.github.com/repos/atvanzt/atvanzt.nl/releases/latest"
      method: GET
      headers:
        Accept: "application/vnd.github+json"
        Authorization: "Bearer {{gh_atvanzt_nl_access_token}}"
        X-GitHub-Api-Version: "2022-11-28" 
      status_code: 200
    when: not tag_name_items.skipped 
    register: latest_version 

  - name: Set the semantic version to the latest known version when available 
    set_fact: semantic_version="{{ latest_version.json.tag_name }}" 
    when: not tag_name_items.skipped

  - name: Set the release identification
    set_fact: release_identification="{{ latest_version.json.id }}" 
    when: not tag_name_items.skipped
    
  - name: Log the version to be used for this release
    debug:
      msg: "The release version to be deployed is set to: {{ semantic_version }}"

  - name: Get current list of assets to determine if there has been any asset in the release at all
    ansible.builtin.uri:
      url: "https://api.github.com/repos/atvanzt/atvanzt.nl/releases/{{release_identification}}/assets"
      method: GET
      headers:
        Accept: "application/vnd.github+json"
        Authorization: "Bearer {{gh_atvanzt_nl_access_token}}"
        X-GitHub-Api-Version: "2022-11-28" 
      status_code: 200
    register: list_of_assets

    # Running the following test from the result of the json of all available assets
    # makes it possible to determine if there is/are zero, one or more assets in a release
    # If there is no asset at all, this step will be marked as skipped (skipped == false)
    # that is what we will use to determine if the deployment can be executed at all.
    # So after this ste use: when: not assets_items.skipped (if true means, there was no release found)
  - name: Found out if there is at least one release available for the atvanzt website
    debug:
      msg: "{{ item.browser_download_url }}"
    loop: "{{ list_of_assets.json }}"
    register: assets_items
  
  - name: Download release assets contaning the ATVANZT website
    ansible.builtin.get_url:
      url: "https://api.github.com/repos/atvanzt/atvanzt.nl/releases/assets/{{item.id}}"
      dest: "/tmp/atvanzt.nl/atvanzt.nl.tar.gz"
      headers:
        Accept: "application/octet-stream"
        Authorization: "Bearer {{gh_atvanzt_nl_access_token}}"
        X-GitHub-Api-Version: "2022-11-28" 
    when: not assets_items.skipped
    loop: "{{ list_of_assets.json }}"
    
  - name: Extract atvanzt.nl.tar.gz
    ansible.builtin.unarchive:
      src: "/tmp/atvanzt.nl/atvanzt.nl.tar.gz"
      dest: "{{target_location}}/atvanzt.nl"
      remote_src: yes
    when: not assets_items.skipped
    
    # Create the correct configuration
  - name: Create Ansible inventory file
    shell: > 
      cat << DELIMITER > "{{target_location}}/atvanzt.nl/bin/config.php"
        <?
          define("APPLICATION_NAME", "{{gh_domain_site}}");
          define("SITE_HOSTNAME", "{{gh_domain_site}}");
          define("SITE_URL", "https://{{gh_domain_site}}");
          define("REDIRECT_URL", "https://google.com");
          define("META_DESCRIPTION", "Author: Atvanzt, Illustrator: Atvanzt");
          define("LOG_FILENAME", "visits_atvanzt.log");
          define("IPWHITELIST_FILENAME", ".{{ip_white_list_filename}}");
        ?> 
      DELIMITER
    when: not assets_items.skipped
    
  - name: Create ip_white_list file
    ansible.builtin.copy:
      content: """{{ip_white_list}}"""
      dest: "{{target_location}}/atvanzt.nl{{ip_white_list_filename}}"
    
  - name: Modify permissions
    ansible.builtin.shell:
      cmd: chmod -R 550 *
      chdir: "{{target_location}}/atvanzt.nl"
        
  - name: Modify permission .htaccess
    ansible.builtin.shell:
      cmd: chmod 550 .htaccess
      chdir: "{{target_location}}/atvanzt.nl"        

  - name: Modify ownership
    ansible.builtin.file:
      path: "{{target_location}}/atvanzt.nl"
      state: directory
      recurse: yes
      owner: http
      group: http
      
  - name: Create visits_atvanzt.log file when it did not exist
    ansible.builtin.file:
      path: "{{target_location}}/atvanzt.nl/visits_atvanzt.log"
      state: touch
    when: not stat_visits_log.stat.exists     

  - name: Copy visits_atvanzt.log file
    ansible.builtin.copy:
      src: "/tmp/atvanzt.nl/visits_atvanzt.log"
      dest: "{{target_location}}/atvanzt.nl"
      remote_src: yes
    when: stat_visits_log.stat.exists

  - name: Make sure correct permissions are set for the log file
    ansible.builtin.file:
      path: "{{target_location}}/atvanzt.nl/visits_atvanzt.log"
      state: touch
      owner: http
      group: http
      mode: u+rwx,g+rwx,o-rwx
      
  - name: Make sure correct permissions are set at the root of the website directory
    ansible.builtin.file:
      path: "{{target_location}}/atvanzt.nl"
      state: touch
      owner: root
      group: root
      mode: u-rwx,g-rwx,o-rwx      

  - name: Remove temporary files
    ansible.builtin.file:
      path: "/tmp/atvanzt.nl"
      state: absent

    
    
      
      